import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { ResultType } from "@/pages/Index";

interface GameOverScreenProps {
  resultType: ResultType;
  finalTime: number;
  onRestart: () => void;
}

const GameOverScreen = ({ resultType, finalTime, onRestart }: GameOverScreenProps) => {
  const [showConfetti, setShowConfetti] = useState(false);

  useEffect(() => {
    if (resultType === 'excellent-win') {
      setShowConfetti(true);
      createConfetti();
    }
  }, [resultType]);

  const createConfetti = () => {
    const colors = ['#00ffff', '#ffff00', '#ff00ff', '#00ff00', '#ff0000'];
    const confettiContainer = document.getElementById('confetti-container');
    if (!confettiContainer) return;

    for (let i = 0; i < 100; i++) {
      const confetti = document.createElement('div');
      confetti.className = 'confetti';
      confetti.style.left = Math.random() * 100 + '%';
      confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
      confetti.style.animationDelay = Math.random() * 3 + 's';
      confetti.style.animationDuration = (Math.random() * 2 + 3) + 's';
      confettiContainer.appendChild(confetti);
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const getResultConfig = () => {
    switch (resultType) {
      case 'excellent-win':
        return {
          title: 'üèÜ TH·∫ÆNG XU·∫§T S·∫ÆC! üèÜ',
          message: 'B·∫†N ƒê√É HO√ÄN TH√ÄNH NHI·ªÜM V·ª§ M·ªòT C√ÅCH XU·∫§T S·∫ÆC!',
          description: 'H·ªá th·ªëng an ninh m·∫°ng ƒë√£ ƒë∆∞·ª£c b·∫£o v·ªá. K·∫ª x√¢m nh·∫≠p ƒë√£ b·ªã truy t√¨m v√† v√¥ hi·ªáu h√≥a. V·ªõi t·ªëc ƒë·ªô v√† ki·∫øn th·ª©c c·ªßa b·∫°n, b·∫°n th·ª±c s·ª± l√† m·ªôt chuy√™n gia b·∫£o m·∫≠t!',
          emoji: 'üéñÔ∏è',
          bgColor: 'bg-warning/20',
          borderColor: 'border-warning',
          textColor: 'text-warning',
          glowClass: 'animate-pulse-glow'
        };
      case 'normal-win':
        return {
          title: '‚úÖ NHI·ªÜM V·ª§ HO√ÄN TH√ÄNH',
          message: 'B·∫†N ƒê√É C·ª®U M·∫†NG!',
          description: 'D√π √°p l·ª±c, b·∫°n v·∫´n ho√†n th√†nh nhi·ªám v·ª•. H·ªá th·ªëng an to√†n. Nh∆∞ng c√≤n r·∫•t nhi·ªÅu ƒëi·ªÅu c·∫ßn h·ªçc v·ªÅ b·∫£o m·∫≠t!',
          emoji: 'üõ°Ô∏è',
          bgColor: 'bg-success/20',
          borderColor: 'border-success',
          textColor: 'text-success',
          glowClass: ''
        };
      case 'timeout-loss':
        return {
          title: '‚è∞ H·∫æT TH·ªúI GIAN',
          message: 'QU√Å MU·ªòN...',
          description: 'Th·ªùi gian ƒë√£ h·∫øt. K·∫ª x√¢m nh·∫≠p ƒë√£ truy c·∫≠p ƒë∆∞·ª£c d·ªØ li·ªáu quan tr·ªçng v√† bi·∫øn m·∫•t. H·ªá th·ªëng b·ªã t·ªïn h·∫°i nghi√™m tr·ªçng. H√£y h·ªçc h·ªèi v√† chu·∫©n b·ªã t·ªët h∆°n cho l·∫ßn sau!',
          emoji: 'üíÄ',
          bgColor: 'bg-muted/20',
          borderColor: 'border-muted',
          textColor: 'text-muted-foreground',
          glowClass: ''
        };
      case 'instant-loss':
        return {
          title: '‚ùå TH·∫§T B·∫†I T·ª®C TH·ªúI',
          message: 'K·∫∫ X·∫§U ƒê√É THO√ÅT!',
          description: 'Quy·∫øt ƒë·ªãnh sai l·∫ßm! K·∫ª x√¢m nh·∫≠p ƒë√£ t·∫≠n d·ª•ng k·∫Ω h·ªü, x√≥a d·∫•u v·∫øt v√† cao ch·∫°y xa bay v·ªõi d·ªØ li·ªáu nh·∫°y c·∫£m. ƒê√¢y l√† b√†i h·ªçc ƒëau ƒë·ªõn v·ªÅ t·∫ßm quan tr·ªçng c·ªßa m·ªói quy·∫øt ƒë·ªãnh trong b·∫£o m·∫≠t!',
          emoji: 'üí•',
          bgColor: 'bg-destructive/20',
          borderColor: 'border-destructive',
          textColor: 'text-destructive',
          glowClass: 'animate-danger-pulse'
        };
    }
  };

  const config = getResultConfig();

  return (
    <>
      {showConfetti && <div id="confetti-container" className="fixed inset-0 pointer-events-none z-50" />}
      
      <Card className={`w-full max-w-2xl p-12 ${config.bgColor} border-2 ${config.borderColor} ${config.glowClass}`}>
        <div className="text-center space-y-6">
          <div className="text-8xl mb-4 animate-bounce">
            {config.emoji}
          </div>
          
          <h1 className={`text-4xl font-bold ${config.textColor} neon-glow`}>
            {config.title}
          </h1>
          
          <p className={`text-2xl font-bold ${config.textColor}`}>
            {config.message}
          </p>
          
          <div className="py-6 px-8 bg-card/50 rounded-lg border border-border">
            <p className="text-foreground text-lg leading-relaxed">
              {config.description}
            </p>
          </div>

          {/* Stats */}
          <div className="grid grid-cols-2 gap-4 py-6">
            <div className="p-4 bg-card rounded-lg border border-border">
              <div className="text-sm text-muted-foreground">TH·ªúI GIAN C√íN L·∫†I</div>
              <div className="text-2xl font-bold text-primary font-mono">
                {formatTime(finalTime)}
              </div>
            </div>
            <div className="p-4 bg-card rounded-lg border border-border">
              <div className="text-sm text-muted-foreground">K·∫æT QU·∫¢</div>
              <div className={`text-2xl font-bold ${config.textColor}`}>
                {resultType === 'excellent-win' || resultType === 'normal-win' ? 'TH·∫ÆNG' : 'THUA'}
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="space-y-3 pt-6">
            <Button
              onClick={onRestart}
              className="w-full bg-primary text-primary-foreground hover:bg-primary/80 text-xl font-bold py-6 neon-border"
            >
              üîÑ TH·ª¨ L·∫†I
            </Button>
            
            <p className="text-sm text-muted-foreground">
              "M·ªói th·∫•t b·∫°i l√† m·ªôt b√†i h·ªçc. M·ªói th√†nh c√¥ng l√† m·ªôt c·ªôt m·ªëc."
            </p>
          </div>
        </div>
      </Card>
    </>
  );
};

export default GameOverScreen;
